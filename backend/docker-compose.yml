version: '2'

services:

################################################################################################################
# This section provides us with our persistent data layer. And should define all the different
# images we consider for persistent storage
################################################################################################################


################################################################################################################
#This section provides us with the required databases and should be changed later
#to define a cluster setup for production user as well as referencing shared storage
################################################################################################################

  #just fixing the version to avoid surprises
  mongodb:
    image: mongo:3.2.4
    ports:
      - "27017:27017"

  #mona only supports 1.7.5 at this point in time
  elasticsearch:
     image: elasticsearch:1.7.5
     ports:
       - "9200:9200"
       - "9300:9300"

################################################################################################################
# This section provides us with access to the required messaging queues and services for caching application
# this would be mainly rabbitmq at this stage and redis.
################################################################################################################

  rabbitmq:
    image:  rabbitmq:3-management
    hostname: rabbitmq
    ports:
      - "15673:15672"


################################################################################################################
# This section defines our required services, need to connect mona apps
# to each other
################################################################################################################

# The discovery service provided us with a local overview of our services
# and allows for easy scaling and load balancing using our proxy at a later stage
  discovery:
    image: eros.fiehnlab.ucdavis.edu/mona-discovery
    ports:
      - "8761:8761"
    depends_on:
      - mongodb
      - elasticsearch
      - rabbitmq
    entrypoint: ./wait-for-it.sh mongodb:27017 -t 3600 --strict -- java $JAVA_OPTS -Dspring.profiles.active=docker -jar *.jar

# The configuration service, provides to every client his required configuration
# the client needs to have a bootstrap.yml to register against it

  config:
    image: eros.fiehnlab.ucdavis.edu/mona-configuration
    ports:
      - "1111:1111"

    #####
    # define that the required discovery service needs to be named 'discovery'
    links:
      - discovery

    ####
    # the list of our dependend services
    depends_on:
      - discovery

    #we will be waiting 5 minutes for the discovery service to start up an than start any jar file.
    #java opts can be overriden in the container
    #the configuration points the task as the right ip address for the discovery server
    entrypoint: ./wait-for-it.sh discovery:8761 -t 3600 --strict -- java $JAVA_OPTS -Dspring.profiles.active=docker -jar *.jar

# this proxy server is the main entry point for mona and should be preferable always be used

  proxy:
    image: eros.fiehnlab.ucdavis.edu/mona-proxy
    ports:
      - "8080:8080"
    depends_on:
      - config

    #we will be waiting 5 minutes for the discovery service to start up an than start any jar file.
    #java opts can be overriden in the container
    #the configuration points the task as the right ip address for the discovery server
    #we also define the url for our configuration server here
    entrypoint: ./wait-for-it.sh config:1111 -t 3600 --strict -- java $JAVA_OPTS -Dspring.cloud.config.uri=http://config:1111 -Dspring.profiles.active=docker -jar *.jar


################################################################################################################
# This section defines our required services, need to connect mona apps
# to each other
################################################################################################################

  #webhook support to notify external apis
  webhooks:
    image: eros.fiehnlab.ucdavis.edu/mona-webhooks-server

    depends_on:
      - proxy
      - mongodb
      - elasticsearch
    entrypoint: ./wait-for-it.sh proxy:8080 -t 3600 --strict -- java $JAVA_OPTS -Dspring.cloud.config.uri=http://config:1111 -Dspring.profiles.active=docker -jar *.jar
    ports:
    - "4444:4444"

  #curration scheduler to notify rabbit queue, if any messages are send down the bus
  #it also exposes a couple of rest enpoints to manually schedule curration tasks
  #to the system
  curationScheduler:
    image: eros.fiehnlab.ucdavis.edu/mona-curation-scheduler

    depends_on:
      - proxy
      - mongodb
      - elasticsearch
    entrypoint: ./wait-for-it.sh webhooks:4444 -t 3600 --strict -- java $JAVA_OPTS -Dspring.cloud.config.uri=http://config:1111 -Dspring.profiles.active=docker -jar *.jar
    ports:
    - "5555:5555"

################################################################################################################
# This section defines services, which can be scaled from 1-n times and should be started last
# just to keep the logfile nice and tidy
################################################################################################################

  #this is our main authenticaiton service for the use in mona
  auth:
    image: eros.fiehnlab.ucdavis.edu/mona-auth-server
    depends_on:
      - curationScheduler
    entrypoint: ./wait-for-it.sh curationScheduler:5555 -t 3600 --strict -- java $JAVA_OPTS -Dspring.cloud.config.uri=http://config:1111 -Dspring.profiles.active=docker -jar *.jar

  #persistences and query interface
  persistence:
    image: eros.fiehnlab.ucdavis.edu/mona-persistence-server

    depends_on:
      - curationScheduler
    entrypoint: ./wait-for-it.sh curationScheduler:5555 -t 3600 --strict -- java $JAVA_OPTS -Dspring.cloud.config.uri=http://config:1111 -Dspring.profiles.active=docker -jar *.jar
